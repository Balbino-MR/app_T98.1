services:
# banco de dados mySQL
    db:
        image: mysql:5.7.22 #imagem do docker hub escolhida
        platform: linux/x86_64 #Sistema Operacional (S.O) escolhido para o banco
        restart: unless-stopped #Serviço sempre reiniciado
        container_name: python-db #Nome do serviço (apelido)
        environment:
            MYSQL_DATABASE: ${DB_DATABASE:-python}
            MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-root}
            MYSQL_PASSWORD: ${DB_PASSWORD:-python}
            MYSQL_USER: ${DB_USERNAME:-python}
        volumes: #Pastas espelhadas no container
            # Docker limpa os dados, para persistir criamos um volume
            - ./.dados/mysql/dbdata:/var/lib/mysql
        ports: #Portas de acesso
                #Ext:Int
            - "3308:3306"
        networks:
            - python_network


    # serviços são os container no Docker que são como VM's 
    # o docker não tem uma "tela" para
    # noVNC - para dar acesso à tela do container Ubuntu
    python:
        # a construção (copiar) será na raiz da pasta
        build: .
        # porta da VM : Porta no container
        ports:
        - "7090:7092"
        # persistência/cópia de dados
        volumes:
        - ./src:/src
        environment:
        # tela virtual que será usado pelo noVNC
        - DISPLAY=:0
        # terminal dentro do container python
        tty: true   

# Serviços para usar o PHP  
    nginx:
        build: ./nginx/
        ports:
            - 8090:80

        volumes:
            - ./aplicacao/:/var/www/html/

# Instalado no servidor o Processador do PHP
    php:
        build: ./php/ # pasta de config do container
        expose:
            - 8000 # porta de uso do PHP
        volumes:
            - ./aplicacao/:/var/www/html



networks:
    python_network: # nome da rede
        driver: bridge # permite a comunicação em rede entre os containers 


#ver os containers
# docker ps 
# 127.0.0.1:9000

# criando as imagens dos containers 
# docker compose build

# removendo os containers (descarta tudo)
# docker compose down

# colocamos em funcionamento os containers 
# docker compose up -d --build